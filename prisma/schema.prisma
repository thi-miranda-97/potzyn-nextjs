datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model Product {
  id            String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String 
  slug          String @unique(map:"product_slug_idx")
  category      String
  description   String
  images        String[]
  price         Decimal @default(0) @db.Decimal(12, 2)
  rating        Decimal @default(0) @db.Decimal(3, 2)
  numReviews    Int @default(0)
  stock         Int
  isFeatured    Boolean @default(false)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
}



model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?   @default ("NO_NAME")
  email         String?   @unique(map:"user_email_idx")
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  updatedAt     DateTime @updatedAt
  account       Account[]
  session       Session[]
  blogPosts     BlogPost[]
  @@index([email])
}
model Tag {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String   @unique
  blogPosts     BlogPost[]
}

model BlogPost {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String
  sub           String
  content       String
  authorId      String
  tagId         String
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tag           Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
}
model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
  
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime 
 
  @@id([identifier, token])
 
}

